<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.tenco.bankapp.repository.interfaces.HistoryRepository">
	
	<!-- 거래내역 등록 -->
	<!-- insert 시 파라미터 지정 가능(com.tenco.bankapp.repository.entity.History) 그러나 결과 int로 떨어지니까 int로 설정 -->
	<insert id="insert" parameterType="com.tenco.bankapp.repository.entity.History">
		INSERT INTO history_tb(amount, w_balance, d_balance, w_account_id, d_account_id)
						VALUES(#{amount}, #{wBalance}, #{dBalance}, #{wAccountId}, #{dAccountId})
	</insert>
	
	<!-- 계좌 id로 삭제 -->
	<delete id="deleteById" parameterType="int">
		DELETE FROM history_tb WHERE id = #{id}
	</delete>
	
	<!-- 계좌 id로 update -->
	<update id="updateById">
		UPDATE history_tb 
		SET amount = #{amount}, 
			w_balance = #{wBalance}, 
			d_balance = #{dBalance}
		WHERE id = #{id} 
	</update>
	
	<select id="findAll" resultType="com.tenco.bankapp.repository.entity.History">
		SELECT * FROM history_tb WHERE id = #{id}
	</select>
	
	<!-- 동적 쿼리 생성 예정. 넘겨받는 변수는 repository에서 확인 -->
	<select id="findByIdAndDynamicType" resultType="com.tenco.bankapp.repository.entity.History">
		<if test="type == 'deposit'">
			select h.id, h.amount, h.d_balance as balance,
			       h.created_at,
			       da.number as receiver, 
			       ifnull(wa.number, 'ATM') as sender, 
			       wa.number 
			from history_tb as h  
			left join account_tb as da
			on h.d_account_id = da.id 
			left join account_tb as wa 
			on h.w_account_id = wa.id 
			where h.d_account_id = #{accountId} 
		</if>
		<if test="type == 'withdraw'">
			select h.id, h.amount, h.w_balance as balance,
			       h.created_at,
			       ifnull(da.number, 'ATM') as receiver,
			       wa.number as sender
			from history_tb as h 
			left join account_tb as wa
			on  h.w_account_id = wa.id
			left join account_tb as da 
			on h.d_account_id = da.id 
			where h.w_account_id = #{accountId} 
		</if>
		<if test="type == 'all'">
			select h.id, h.amount, 
			case when h.w_account_id = #{accountId} then (h.w_balance)
			     when h.d_account_id = #{accountId} then (h.d_balance)
			     end as balance,
			     ifnull(wa.number, 'ATM') as sender, 
			     ifnull(da.number, 'ATM') as receiver, 
			     h.created_at 
			from history_tb as h 
			left join account_tb as da 
			on h.d_account_id = da.id 
			left join account_tb as wa 
			on h.w_account_id = wa.id
			where h.d_account_id = #{accountId} or h.w_account_id = #{accountId}
		</if>
	</select>
</mapper>